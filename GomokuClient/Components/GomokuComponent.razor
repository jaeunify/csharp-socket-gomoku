@using GomokuPacket
@using Microsoft.JSInterop
@using Radzen
@using Radzen.Blazor
@inject IJSRuntime Js
@inject ServerClient ServerClient
@inject GameState GameState

<style>
    .board {
        min-width: 480px;
    }

    .cell {
        width: 32px !important;
        height: 32px !important;
        padding: 0 !important;
        display: inline-flex;
        /* ← inline-flex 로 <br> 작동하게 */
        justify-content: center;
        align-items: center;
        font-size: 18px;
        line-height: 1;
    }
</style>


<div class="board">
    @for (var y = 0; y < GameOption.BoardSize; y++)
    {
        @for (var x = 0; x < GameOption.BoardSize; x++)
        {
            var ix = x;
            var iy = y; // <= 복사본

            <RadzenButton class="cell" Size="ButtonSize.Small" ButtonStyle="ButtonStyle.Light" Click="@(() => SetRock(ix, iy))">
                @CellText(Board[iy, ix])
            </RadzenButton>
        }

        <br>
    }
</div>

@code {
    private Rock[,] Board;

    protected override void OnInitialized()
    {
        GameState.OnChange += HandleGameStateChange;
        ServerClient.OnReceivePacket += HandleReceivePacket;
        ServerClient.OnError += HandleError;
        ServerClient.OnSendPacket += HandleSendPacket;

        Board = GameState.Board;
    }

    public void Dispose()
    {
        GameState.OnChange -= HandleGameStateChange;
        ServerClient.OnReceivePacket -= HandleReceivePacket;
        ServerClient.OnError -= HandleError;
        ServerClient.OnSendPacket -= HandleSendPacket;
    }

    private void HandleGameStateChange()
    {
        InvokeAsync(StateHasChanged);
    }

    string CellText(Rock r) => r switch
    {
        Rock.Empty => "+",
        Rock.White => "○",
        Rock.Black => "●",
        _ => "+"
    };

    async Task SetRock(int x, int y)
    {
        var (success, msg) = GameState.SetRock(true, x, y);
        if (!success)
        {
            await Js.InvokeVoidAsync("alert", msg);
            return;
        }

        await ServerClient.SendAsync(new SetRockPacket() { X = x, Y = y });
    }

    void HandleReceivePacket(Packet packet)
    {
        if (packet is GameStartPacket gameStartPacket)
        {
            GameState.SetMyRock(gameStartPacket.AmIFirst);
        }
        else if (packet is SetRockPacket setRockPacket)
        {
            var (success, msg) = GameState.SetRock(false, setRockPacket.X, setRockPacket.Y);
            if (success == false)
            {
                throw new Exception(msg);
            }
        }
        else if (packet is GameEndPacket gameEndPacket)
        {
            if (gameEndPacket.AmIWin)
            {
                _ = Js.InvokeVoidAsync("alert", "승리!");
            }
            else
            {

                _ = Js.InvokeVoidAsync("alert", "패배..");
            }
        }
    }

    void HandleError()
    {
        GameState.HandleError();
    }

    bool HandleSendPacket(Packet packet)
    {
        if (packet is SetRockPacket setRockPacket)
        {
            var (success, msg) = GameState.SetRock(true, setRockPacket.X, setRockPacket.Y);
            if (!success)
            {
                _ = Js.InvokeVoidAsync("alert", msg);
                return false;
            }
        }

        return true;
    }
}