@page "/"
@using Microsoft.JSInterop
@using Radzen
@using Radzen.Blazor
@using GomokuPacket
@using System.Text.Json

@inject IJSRuntime Js
@inject LogState LogState
@inject ServerClient ServerClient

<div style="padding: 20px;">
    <h3 class="mt-4 mb-2">TCP Gomoku Client</h3>

    <RadzenFieldset Text="Connection">
        <RadzenRow>
            @StatusMessage
        </RadzenRow>
        <RadzenRow>
            <RadzenTextBox @bind-Value="IpAddress" Name="IP" Style="width: 200px;" Placeholder="IP Address" />
            <RadzenNumeric @bind-Value="Port" Name="Port" Style="width: 100px;" />
            @if (IsConnected)
            {
                <RadzenButton Text="Disconnect" Click="Disconnect" Icon="link_off" ButtonStyle="ButtonStyle.Danger" />
            }
            else
            {
                <RadzenButton Text="Connect" Click="Connect" Icon="link" Style="margin-right: 5px;" />
            }
        </RadzenRow>
    </RadzenFieldset>

    <RadzenFieldset Text="Message">
        <div style="display: flex; gap: 10px;">
            <RadzenDropDown TValue=PacketId Value=@PacketId Data=@packetIds
                Change="@(args => ChangePacketId((PacketId)args))" Style="width: 150px; max-width: 400px;"
                Name="DropDownChangeEvent" />
            <RadzenTextBox @bind-Value=@Input Name="Message" Style="flex-grow: 1;"
                Placeholder="Enter message to send" />
            <RadzenButton Text="Send" Click="Send" Icon="send" ButtonStyle="ButtonStyle.Primary"
                Style="width: 100px;" />
        </div>

        <div
            style="white-space: pre-line; font-family: monospace; max-height: 300px; overflow-y: auto; margin-top: 10px;">
            @((MarkupString)string.Join("\n", LogState.GetReversedLogs()))
        </div>
    </RadzenFieldset>
</div>

@code {
    // todo variable 정리
    Dictionary<PacketId, (Type packetType, string DefaultInput)> SendAblePackets = new();
    string IpAddress = "127.0.0.1";
    int Port = 32452;
    PacketId PacketId;
    List<PacketId> packetIds = new();
    string Input;
    string StatusMessage = "Not connected";

    bool IsConnected = false;

    protected override void OnInitialized()
    {
        LogState.OnChange += HandleLogChange;

        SendAblePackets = new Dictionary<PacketId, (Type packetType, string DefaultInput)>
{
{ PacketId.Enter, (typeof(EnterPacket), JsonSerializer.Serialize(new EnterPacket())) },
{ PacketId.SetRock, (typeof(SetRockPacket), JsonSerializer.Serialize(new SetRockPacket(){X = 0, Y = 0})) },
};

        packetIds = SendAblePackets.Keys.ToList();

        ChangePacketId(PacketId.Enter);
    }

    private void HandleLogChange()
    {
        InvokeAsync(StateHasChanged);
    }

    public void Dispose()
    {
        LogState.OnChange -= HandleLogChange;
    }

    async Task Connect()
    {
        try
        {
            ServerClient.Configure(IpAddress, Port);

            await ServerClient.ConnectAsync();

            IsConnected = true;
            StatusMessage = $"Connected to {IpAddress}:{Port}";
            LogState.AddLog("서버에 접속 성공");
        }
        catch (Exception ex)
        {
            StatusMessage = $"Connection failed: {ex.Message}";
        }
    }

    void Disconnect()
    {
        if (IsConnected)
        {
            ServerClient.Disconnect();

            IsConnected = false;
            StatusMessage = "Disconnected";
            LogState.AddLog("서버 접속이 끊어짐");
        }
    }

    async Task Send()
    {
        if (!IsConnected)
        {
            await Js.InvokeVoidAsync("alert", "먼저 서버에 접속하세요.");
            return;
        }

        try
        {
            var packetType = SendAblePackets[PacketId].packetType;
            var packet = (Packet)JsonSerializer.Deserialize(Input, packetType);
            await ServerClient.SendAsync(packet);
            LogState.AddLog($"[전송] {PacketId} {Input}");
        }
        catch (JsonException)
        {
            await Js.InvokeVoidAsync("alert", "입력 내용이 패킷 형식에 맞지 않습니다.");
        }
        catch
        {
            throw;
        }
    }

    private void ChangePacketId(PacketId packetId)
    {
        PacketId = packetId;
        Input = SendAblePackets[packetId].DefaultInput;
    }
}
